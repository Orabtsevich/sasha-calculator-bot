import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    ADDRESS, WIDTH, HEIGHT, ELEMENTS, RS_COUNT, SHELVES,
    SHELF_SIZES_CHOICE, CUSTOM_SHELF_SIZES, ROD, FALSE_PANEL, METAL_CUTTING,
    RS_TYPE, SHELF_TYPE, SGR_TIERS, SGR_ADJUSTMENT, BUMPER_INSTALLATION,
    BUMPER_TRANSFER, SECOND_INSTALLER, DISTANCE_KAD, WALL_MATERIAL,
    ROOF_MATERIAL, RS_PROFILE, FLOOR_COVERING, COLOR, SHELF_MATERIAL,
    OPTIONS, OPTION_COUNT, RESTART
) = range(28)

# –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
PRICE_LIST = {
    '–í—ã—Ö–æ–¥': 2000,
    '–î–æ—Å—Ç–∞–≤–∫–∞ 1 –∑–∞–∫–∞–∑': 2000,
    '–í—Ç–æ—Ä–∞—è –†/–° —à–∏—Ä–µ 2—Ö –º–µ—Ç—Ä–æ–≤': 1000,
    '–í—Ç–æ—Ä–æ–π –º–æ–Ω—Ç–∞–∂–Ω–∏–∫': 2000,
    '–ë–æ–∫–æ–≤–∞—è —Å—Ç–µ–Ω–∫–∞. –º/–ø': 364,
    '–ö—Ä—ã—à–∞. –º/–ø': 280,
    '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è. –º/–ø': 180,
    '–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞. –º2': 250,
    '–î–Ω–æ OSB. –º/–ø': 350,
    '–ù–∞ –¥–Ω–æ –∫–≤–∏–Ω—Ç–µ—Ç (—Ü–∏–Ω–∫). –º/–ø': 100,
    '–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞. –º/–ø': 300,
    '–§–∞–ª—å—à-–ø–∞–Ω–µ–ª—å. —à—Ç': 550,
    '–†/–° (PD39, PD45, PD55 –¥–æ 6 –º2). —à—Ç': 300,
    '–†/–° (AER44mS –æ—Ç 4 –º2, PD55 –æ—Ç 6 –º2). —à—Ç': 500,
    '–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂–∞ + —É–ø–æ—Ä. –º/–ø': 250,
    '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ OSB. –º/–ø': 100,
    '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ –º–µ—Ç–∞–ª–ª. –º/–ø': 160,
    '–†–µ–∑–∫–∞ –º–µ—Ç–∞–ª–ª, –ª–∞–º–µ–ª–µ–π. —à—Ç': 30,
    '–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂. —à—Ç': 400,
    '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä—É—Å–æ–≤. –º/–ø': 80,
    '–ü–æ–¥–≥–æ–Ω–∫–∞ –ø–æ —à–∏—Ä–∏–Ω–µ –Ω–∞ –º–µ—Å—Ç–µ. –ö–æ–º–ø–ª–µ–∫': 500,
    '–®—Ç–∞–Ω–≥–∞. —à—Ç': 200,
    '–û—Ç–±–æ–π–Ω–∏–∫–∏ (–º–æ–Ω—Ç–∞–∂ –Ω–æ–≤—ã—Ö). –∫–æ–º–ø–ª–µ–∫': 400,
    '–û—Ç–±–æ–π–Ω–∏–∫–∏ (–ø–µ—Ä–µ–Ω–æ—Å). –∫–æ–º–ø–ª–µ–∫': 700,
    'LED —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫. —à—Ç': 200,
    '–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥ (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ) —à—Ç': 500,
    '–í–µ–Ω—Ç —Ä–µ—à–µ—Ç–∫–∏ (—Å—Ç–µ–Ω–∫–∏) —à—Ç': 200,
    '–°—Ç–æ–π–∫–∏ –¥–ª—è –∫–æ–ª–µ—Å. —à—Ç': 500,
    '–í—ã–µ–∑–¥ –∑–∞ –ú–ö–ê–î –±–æ–ª–µ–µ 10 –∫–º. (15–†—É–±/–∫–º)': 15,
    '–í—ã—Å–æ—Ç–∞ —à–∫–∞—Ñ–∞ 2,5-3 –º': 500,
    '–í—ã—Å–æ—Ç–∞ —à–∫–∞—Ñ–∞ 3–º –∏ –±–æ–ª–µ–µ': 1000,
    '–§–æ—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–∞ —Ñ–æ–Ω–µ —à–∫–∞—Ñ–∞. —à—Ç': 250,
    '–í–∏–¥–µ–æ–æ—Ç–∑—ã–≤': 750
}

MATERIALS = {
    'wall': ["–°—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª—å 40 –º–º", "–ü—Ä–æ—Ñ–ª–∏—Å—Ç –°8–ê, 0,45 –º–º"],
    'roof': ["–°—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª—å 40 –º–º", "–ü—Ä–æ—Ñ–ª–∏—Å—Ç –°8–ê, 0,45 –º–º", "–ü–ª–∏—Ç–∞ OSB + –º—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è"],
    'rs_profile': ["PD 45", "PD 55", "AR 40", "AER 44–º/5", "AEG 56"],
    'floor': ["–Ω–µ—Ç", "–ø–æ–∫—Ä–∞—Å–∫–∞", "–ª–∏—Å—Ç –æ—Ü–∏–Ω–∫. –º–µ—Ç–∞–ª–ª–∞", "–ª–∏—Å—Ç –∞–ª—é–º–∏–Ω–∏—è (–∫–≤–∏–Ω—Ç–µ—Ç)"],
    'color': ["–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π RAL 9006", "–ë–µ–∂–µ–≤—ã–π RAL 1014", "–ë–µ–ª—ã–π RAL 9003", "–ê–Ω—Ç—Ä–∞—Ü–∏—Ç RAL 7016", "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π RAL 8014", "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π RAL 8017", "–°–µ—Ä—ã–π RAL 7038"],
    'shelf': ["–ú–µ—Ç–∞–ª–ª", "–ü–ª–∏—Ç–∞ OSB 22 –º–º", "–°–ì–†", "–ù–∞–≤–µ—Å–Ω–æ–π"]
}

OPTIONS_LIST = [
    "–í–µ–Ω—Ç. —Ä–µ—à–µ—Ç–∫–∞",
    "LED —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫", 
    "–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥",
    "–°—Ç–æ–π–∫–∏ –¥–ª—è –∫–æ–ª–µ—Å",
    "–§–æ—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–∞",
    "–í–∏–¥–µ–æ–æ—Ç–∑—ã–≤"
]

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–ø—Ü–∏–π –∏ –∏—Ö —Ü–µ–Ω –≤ –ø—Ä–∞–π—Å–µ
OPTION_PRICE_KEYS = {
    "–í–µ–Ω—Ç. —Ä–µ—à–µ—Ç–∫–∞": "–í–µ–Ω—Ç —Ä–µ—à–µ—Ç–∫–∏ (—Å—Ç–µ–Ω–∫–∏) —à—Ç",
    "LED —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫": "LED —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫. —à—Ç",
    "–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥": "–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥ (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ) —à—Ç",
    "–°—Ç–æ–π–∫–∏ –¥–ª—è –∫–æ–ª–µ—Å": "–°—Ç–æ–π–∫–∏ –¥–ª—è –∫–æ–ª–µ—Å. —à—Ç",
    "–§–æ—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–∞": "–§–æ—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–∞ —Ñ–æ–Ω–µ —à–∫–∞—Ñ–∞. —à—Ç",
    "–í–∏–¥–µ–æ–æ—Ç–∑—ã–≤": "–í–∏–¥–µ–æ–æ—Ç–∑—ã–≤"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ –°–∞—à–∏.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ä–∞—Å—á—ë—Ç. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–æ–Ω—Ç–∞–∂–∞:"
    )
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —à–∫–∞—Ñ–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500):")
    return WIDTH

async def get_width(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        width = int(update.message.text)
        if width < 0:
            raise ValueError
        context.user_data['width'] = width
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —à–∫–∞—Ñ–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2800):")
        return HEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—à–∏—Ä–∏–Ω–∞ –≤ –º–º, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return WIDTH

async def get_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = int(update.message.text)
        if height < 0:
            raise ValueError
        context.user_data['height'] = height
        
        keyboard = [
            ["–ö—Ä—ã—à–∞", "–ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞", "–õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞"],
            ["–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞", "–î–Ω–æ", "–î–∞–ª–µ–µ"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —à–∫–∞—Ñ–∞ (–Ω–∞–∂–∏–º–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É):\n"
            "‚Ä¢ –ö—Ä—ã—à–∞ - –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å\n"
            "‚Ä¢ –ü—Ä–∞–≤–∞—è/–õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞ - –±–æ–∫–æ–≤—ã–µ —Å—Ç–µ–Ω–∫–∏\n"
            "‚Ä¢ –ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞ - –∑–∞–¥–Ω—è—è —á–∞—Å—Ç—å\n"
            "‚Ä¢ –î–Ω–æ - –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å\n\n"
            "–ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ':",
            reply_markup=reply_markup
        )
        context.user_data['elements'] = []
        return ELEMENTS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–≤—ã—Å–æ—Ç–∞ –≤ –º–º, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return HEIGHT

async def get_elements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "–î–∞–ª–µ–µ":
        await update.message.reply_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –†/–° (—Ä–æ–ª—å—Å—Ç–∞–≤–Ω–µ–π):", 
            reply_markup=ReplyKeyboardRemove()
        )
        return RS_COUNT
    
    element_map = {
        "–ö—Ä—ã—à–∞": "roof",
        "–ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞": "right_wall",
        "–õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞": "left_wall",
        "–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞": "back_wall",
        "–î–Ω–æ": "floor"
    }
    
    if text in element_map:
        if element_map[text] not in context.user_data['elements']:
            context.user_data['elements'].append(element_map[text])
            message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {text}"
        else:
            message = f"‚ÑπÔ∏è –≠–ª–µ–º–µ–Ω—Ç '{text}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω"
    else:
        message = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ."
    
    keyboard = [
        ["–ö—Ä—ã—à–∞", "–ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞", "–õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞"],
        ["–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞", "–î–Ω–æ", "–î–∞–ª–µ–µ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
    await update.message.reply_text(
        f"{message}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —à–∫–∞—Ñ–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    
    return ELEMENTS

async def get_rs_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count < 0:
            raise ValueError
        context.user_data['rs_count'] = count
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫:")
        return SHELVES
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
        )
        return RS_COUNT

async def get_shelves(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count < 0:
            raise ValueError
        context.user_data['shelves'] = count
        
        if count > 0:
            keyboard = [["–î–∞, –≤–≤–æ–¥–∏—Ç—å –≤—Ä—É—á–Ω—É—é"], ["–ù–µ—Ç, –ø–æ–ª–∫–∏ = —à–∏—Ä–∏–Ω–µ —à–∫–∞—Ñ–∞"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                "–ü–æ–ª–∫–∏ –Ω–µ –≤ —Ä–∞–∑–º–µ—Ä —à–∫–∞—Ñ–∞?",
                reply_markup=reply_markup
            )
            return SHELF_SIZES_CHOICE
        else:
            context.user_data['custom_shelf_sizes'] = False
            await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç–∞–Ω–≥:")
            return ROD
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return SHELVES

async def shelf_sizes_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "–î–∞, –≤–≤–æ–¥–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
        context.user_data['custom_shelf_sizes'] = True
        context.user_data['shelf_widths'] = []
        context.user_data['current_shelf'] = 1
        await update.message.reply_text(f"üî¢ –í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–ª–∫–∏ 1 –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö:")
        return CUSTOM_SHELF_SIZES
    else:
        context.user_data['custom_shelf_sizes'] = False
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç–∞–Ω–≥:")
        return ROD

async def custom_shelf_sizes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        width = int(update.message.text)
        if width < 0:
            raise ValueError
        context.user_data['shelf_widths'].append(width)
        
        current = context.user_data['current_shelf']
        total = context.user_data['shelves']
        
        if current < total:
            context.user_data['current_shelf'] += 1
            await update.message.reply_text(f"üî¢ –í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–ª–∫–∏ {current + 1} –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö:")
            return CUSTOM_SHELF_SIZES
        else:
            await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç–∞–Ω–≥:")
            return ROD
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return CUSTOM_SHELF_SIZES

async def get_rod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count < 0:
            raise ValueError
        context.user_data['rod'] = count
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–ª—å—à-–ø–∞–Ω–µ–ª–µ–π:")
        return FALSE_PANEL
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return ROD

async def get_false_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count < 0:
            raise ValueError
        context.user_data['false_panel'] = count
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–∫–∏ –º–µ—Ç–∞–ª–ª/–ª–∞–º–µ–ª–µ–π (—à—Ç):")
        return METAL_CUTTING
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return FALSE_PANEL

async def get_metal_cutting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count < 0:
            raise ValueError
        context.user_data['metal_cutting'] = count
        
        keyboard = [["–î–æ 6 –º¬≤ (300 ‚ÇΩ/—à—Ç)"], ["–ë–æ–ª–µ–µ 6 –º¬≤ (500 ‚ÇΩ/—à—Ç)"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–ª—å—Å—Ç–∞–≤–Ω–µ–π:", reply_markup=reply_markup)
        return RS_TYPE
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return METAL_CUTTING

async def get_rs_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if "–î–æ 6 –º¬≤" in choice:
        context.user_data['rs_type'] = 'upTo6'
    else:
        context.user_data['rs_type'] = 'over6'
    
    keyboard = [["–ë–µ–∑ —Å—Ç–µ–ª–ª–∞–∂–∞"], ["–°—Ç–∞–Ω–¥–∞—Ä—Ç (–Ω–µ—Ä–∞–∑–±–æ—Ä–Ω—ã–π)"], ["–°–ì–† (—Ä–∞–∑–±–æ—Ä–Ω—ã–π)"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–µ–ª–ª–∞–∂–∞:", reply_markup=reply_markup)
    return SHELF_TYPE

async def get_shelf_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if "–ë–µ–∑ —Å—Ç–µ–ª–ª–∞–∂–∞" in choice:
        context.user_data['shelf_type'] = 'none'
    elif "–°—Ç–∞–Ω–¥–∞—Ä—Ç" in choice:
        context.user_data['shelf_type'] = 'standard'
    else:
        context.user_data['shelf_type'] = 'sgr'
    
    if context.user_data['shelf_type'] == 'sgr' and context.user_data.get('shelves', 0) > 0:
        await update.message.reply_text("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä—É—Å–æ–≤? (–¥–∞/–Ω–µ—Ç):")
        return SGR_TIERS
    else:
        await update.message.reply_text("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–±–æ–π–Ω–∏–∫–æ–≤? (–¥–∞/–Ω–µ—Ç):")
        return BUMPER_INSTALLATION

async def get_sgr_tiers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() in ['–¥–∞', 'yes', 'y']:
        context.user_data['sgr_tiers'] = True
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—Ä—É—Å–æ–≤:")
        return SGR_ADJUSTMENT
    else:
        context.user_data['sgr_tiers'] = False
        await update.message.reply_text("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–±–æ–π–Ω–∏–∫–æ–≤? (–¥–∞/–Ω–µ—Ç):")
        return BUMPER_INSTALLATION

async def get_sgr_adjustment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        context.user_data['sgr_tiers_count'] = count
        await update.message.reply_text("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–±–æ–π–Ω–∏–∫–æ–≤? (–¥–∞/–Ω–µ—Ç):")
        return BUMPER_INSTALLATION
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return SGR_ADJUSTMENT

async def get_bumper_installation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() in ['–¥–∞', 'yes', 'y']:
        context.user_data['bumper_installation'] = True
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –æ—Ç–±–æ–π–Ω–∏–∫–æ–≤:")
        return BUMPER_TRANSFER
    else:
        context.user_data['bumper_installation'] = False
        await update.message.reply_text("–ü–µ—Ä–µ–Ω–æ—Å –æ—Ç–±–æ–π–Ω–∏–∫–æ–≤? (–¥–∞/–Ω–µ—Ç):")
        return BUMPER_TRANSFER

async def get_bumper_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('bumper_installation'):
        try:
            count = int(update.message.text)
            context.user_data['bumper_installation_count'] = count
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
            return BUMPER_TRANSFER
    
    if update.message.text.lower() in ['–¥–∞', 'yes', 'y']:
        context.user_data['bumper_transfer'] = True
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–∞:")
        return SECOND_INSTALLER
    else:
        context.user_data['bumper_transfer'] = False
        await update.message.reply_text("–í—Ç–æ—Ä–æ–π –º–æ–Ω—Ç–∞–∂–Ω–∏–∫? (–¥–∞/–Ω–µ—Ç):")
        return SECOND_INSTALLER

async def get_second_installer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('bumper_transfer'):
        try:
            count = int(update.message.text)
            context.user_data['bumper_transfer_count'] = count
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
            return SECOND_INSTALLER
    
    if update.message.text.lower() in ['–¥–∞', 'yes', 'y']:
        context.user_data['second_installer'] = True
    else:
        context.user_data['second_installer'] = False
    
    height = context.user_data['height']
    if height >= 3000:
        context.user_data['height_over_3000'] = True
        context.user_data['height_over_2500'] = False
    elif height >= 2500:
        context.user_data['height_over_2500'] = True
        context.user_data['height_over_3000'] = False
    else:
        context.user_data['height_over_2500'] = False
        context.user_data['height_over_3000'] = False
    
    await update.message.reply_text("üöó –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ö–ê–î –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö:")
    return DISTANCE_KAD

async def get_distance_kad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        distance = float(update.message.text)
        if distance < 0:
            raise ValueError
        context.user_data['distance_kad'] = distance
        
        keyboard = [[mat] for mat in MATERIALS['wall']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—Ç–µ–Ω–æ–∫:", reply_markup=reply_markup)
        return WALL_MATERIAL
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º):")
        return DISTANCE_KAD

async def get_wall_material(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['wall_material'] = update.message.text
    keyboard = [[mat] for mat in MATERIALS['roof']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫—Ä—ã—à–∏:", reply_markup=reply_markup)
    return ROOF_MATERIAL

async def get_roof_material(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['roof_material'] = update.message.text
    keyboard = [[mat] for mat in MATERIALS['rs_profile']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –†/–°:", reply_markup=reply_markup)
    return RS_PROFILE

async def get_rs_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rs_profile'] = update.message.text
    keyboard = [[mat] for mat in MATERIALS['floor']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–Ω–∞:", reply_markup=reply_markup)
    return FLOOR_COVERING

async def get_floor_covering(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['floor_covering'] = update.message.text
    keyboard = [[mat] for mat in MATERIALS['color']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=reply_markup)
    return COLOR

async def get_color(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['color'] = update.message.text
    keyboard = [[mat] for mat in MATERIALS['shelf']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–ª–æ–∫:", reply_markup=reply_markup)
    return SHELF_MATERIAL

async def get_shelf_material(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['shelf_material'] = update.message.text
    
    keyboard = [[opt] for opt in OPTIONS_LIST] + [["–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (–ø–æ –æ–¥–Ω–æ–π):\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—ã–±–æ—Ä.",
        reply_markup=reply_markup
    )
    context.user_data['selected_options'] = {}
    return OPTIONS

async def get_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä":
        await calculate_result(update, context)
        return ConversationHandler.END
    
    if text in OPTIONS_LIST:
        context.user_data['current_option'] = text
        await update.message.reply_text(f"üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '{text}':")
        return OPTION_COUNT
    else:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return OPTIONS

async def get_option_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count < 0:
            raise ValueError
        
        current_option = context.user_data['current_option']
        context.user_data['selected_options'][current_option] = count
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø—Ü–∏–∏
        keyboard = [[opt] for opt in OPTIONS_LIST] + [["–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {current_option} - {count} —à—Ç\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—ã–±–æ—Ä:",
            reply_markup=reply_markup
        )
        return OPTIONS
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return OPTION_COUNT

async def restart_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç":
        return await start(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.")
        return RESTART

async def calculate_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    results = []
    total = 0
    
    results.append("–í—ã—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É: 2000 ‚ÇΩ")
    total += 2000
    results.append("–î–æ—Å—Ç–∞–≤–∫–∞ 1 –∑–∞–∫–∞–∑: 2000 ‚ÇΩ")
    total += 2000
    
    elements = data.get('elements', [])
    width = data['width']
    height = data['height']
    
    if 'right_wall' in elements or 'left_wall' in elements:
        wall_count = sum(1 for e in ['right_wall', 'left_wall'] if e in elements)
        wall_length = height / 1000
        wall_cost = wall_count * wall_length * PRICE_LIST['–ë–æ–∫–æ–≤–∞—è —Å—Ç–µ–Ω–∫–∞. –º/–ø']
        results.append(f"–ë–æ–∫–æ–≤—ã–µ —Å—Ç–µ–Ω–∫–∏ ({wall_count} —à—Ç): {wall_cost:.0f} ‚ÇΩ")
        total += wall_cost
    
    if 'roof' in elements:
        roof_length = width / 1000
        roof_cost = roof_length * PRICE_LIST['–ö—Ä—ã—à–∞. –º/–ø']
        results.append(f"–ö—Ä—ã—à–∞: {roof_cost:.0f} ‚ÇΩ")
        total += roof_cost
    
    if 'back_wall' in elements:
        back_area = (width * height) / 1000000
        back_cost = back_area * PRICE_LIST['–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞. –º2']
        results.append(f"–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞: {back_cost:.0f} ‚ÇΩ")
        total += back_cost
    
    if 'floor' in elements:
        floor_length = width / 1000
        floor_cost = floor_length * PRICE_LIST['–î–Ω–æ OSB. –º/–ø']
        results.append(f"–î–Ω–æ OSB: {floor_cost:.0f} ‚ÇΩ")
        total += floor_cost
        
        if data.get('floor_covering') in ["–ª–∏—Å—Ç –æ—Ü–∏–Ω–∫. –º–µ—Ç–∞–ª–ª–∞", "–ª–∏—Å—Ç –∞–ª—é–º–∏–Ω–∏—è (–∫–≤–∏–Ω—Ç–µ—Ç)"]:
            covering_cost = floor_length * PRICE_LIST['–ù–∞ –¥–Ω–æ –∫–≤–∏–Ω—Ç–µ—Ç (—Ü–∏–Ω–∫). –º/–ø']
            results.append(f"–ù–∞ –¥–Ω–æ –∫–≤–∏–Ω—Ç–µ—Ç: {covering_cost:.0f} ‚ÇΩ")
            total += covering_cost
    
    rs_count = data.get('rs_count', 0)
    if rs_count > 0:
        if data['rs_type'] == 'upTo6':
            rs_cost = rs_count * PRICE_LIST['–†/–° (PD39, PD45, PD55 –¥–æ 6 –º2). —à—Ç']
            results.append(f"–†/–° –¥–æ 6 –º¬≤ ({rs_count} —à—Ç): {rs_cost} ‚ÇΩ")
        else:
            rs_cost = rs_count * PRICE_LIST['–†/–° (AER44mS –æ—Ç 4 –º2, PD55 –æ—Ç 6 –º2). —à—Ç']
            results.append(f"–†/–° –±–æ–ª–µ–µ 6 –º¬≤ ({rs_count} —à—Ç): {rs_cost} ‚ÇΩ")
        total += rs_cost
    
    shelves = data.get('shelves', 0)
    if shelves > 0 and data['shelf_type'] == 'standard':
        shelf_width = width / 1000
        if data.get('custom_shelf_sizes'):
            if data.get('shelf_widths'):
                avg_width = sum(data['shelf_widths']) / len(data['shelf_widths']) / 1000
                shelf_width = avg_width
        
        if data['shelf_material'] == '–ú–µ—Ç–∞–ª–ª':
            shelf_cost = shelves * shelf_width * PRICE_LIST['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ –º–µ—Ç–∞–ª–ª. –º/–ø']
            results.append(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ –º–µ—Ç–∞–ª–ª: {shelf_cost:.0f} ‚ÇΩ")
            total += shelf_cost
        elif data['shelf_material'] == '–ü–ª–∏—Ç–∞ OSB 22 –º–º':
            shelf_cost = shelves * shelf_width * PRICE_LIST['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ OSB. –º/–ø']
            results.append(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ OSB: {shelf_cost:.0f} ‚ÇΩ")
            total += shelf_cost
        
        frame_cost = shelves * shelf_width * PRICE_LIST['–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂–∞ + —É–ø–æ—Ä. –º/–ø']
        results.append(f"–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂–∞ + —É–ø–æ—Ä: {frame_cost:.0f} ‚ÇΩ")
        total += frame_cost
    
    elif shelves > 0 and data['shelf_type'] == 'sgr':
        frame_cost = shelves * PRICE_LIST['–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂. —à—Ç']
        results.append(f"–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂–∞ –°–ì–†: {frame_cost} ‚ÇΩ")
        total += frame_cost
        
        if data.get('sgr_tiers'):
            tier_cost = (width / 1000) * data.get('sgr_tiers_count', 0) * PRICE_LIST['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä—É—Å–æ–≤. –º/–ø']
            results.append(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä—É—Å–æ–≤ –°–ì–†: {tier_cost:.0f} ‚ÇΩ")
            total += tier_cost
    
    selected_opts = data.get('selected_options', {})
    for opt, count in selected_opts.items():
        price_key = OPTION_PRICE_KEYS[opt]
        cost = count * PRICE_LIST[price_key]
        results.append(f"{opt} ({count} —à—Ç): {cost} ‚ÇΩ")
        total += cost
    
    if data.get('second_installer'):
        total += PRICE_LIST['–í—Ç–æ—Ä–æ–π –º–æ–Ω—Ç–∞–∂–Ω–∏–∫']
        results.append("–í—Ç–æ—Ä–æ–π –º–æ–Ω—Ç–∞–∂–Ω–∏–∫: 2000 ‚ÇΩ")
    
    if data.get('height_over_2500'):
        total += PRICE_LIST['–í—ã—Å–æ—Ç–∞ —à–∫–∞—Ñ–∞ 2,5-3 –º']
        results.append("–í—ã—Å–æ—Ç–∞ 2,5-3 –º: 500 ‚ÇΩ")
    elif data.get('height_over_3000'):
        total += PRICE_LIST['–í—ã—Å–æ—Ç–∞ —à–∫–∞—Ñ–∞ 3–º –∏ –±–æ–ª–µ–µ']
        results.append("–í—ã—Å–æ—Ç–∞ 3–º –∏ –±–æ–ª–µ–µ: 1000 ‚ÇΩ")
    
    distance = data.get('distance_kad', 0)
    if distance > 0:
        delivery_cost = distance * PRICE_LIST['–í—ã–µ–∑–¥ –∑–∞ –ú–ö–ê–î –±–æ–ª–µ–µ 10 –∫–º. (15–†—É–±/–∫–º)']
        results.append(f"–í—ã–µ–∑–¥ –∑–∞ –ö–ê–î ({distance} –∫–º): {delivery_cost:.0f} ‚ÇΩ")
        total += delivery_cost
    
    result_text = "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:\n\n" + "\n".join(results) + f"\n\nüí∞ –ò–¢–û–ì–û: {total:.0f} ‚ÇΩ"
    await update.message.reply_text(result_text, reply_markup=ReplyKeyboardRemove())
    
    keyboard = [["–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç?", reply_markup=reply_markup)
    
    return RESTART

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    TOKEN = "8258670576:AAEeT3bQfOQ1Euqdbw3jVhEXVETmyQ43iXs"
    print(f"üöÄ BOT_TOKEN (length={len(TOKEN) if TOKEN else 0}): '{TOKEN}'")

    if not TOKEN:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return

    try:
        application = Application.builder().token(TOKEN).build()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            WIDTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_width)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_height)],
            ELEMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_elements)],
            RS_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rs_count)],
            SHELVES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_shelves)],
            SHELF_SIZES_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, shelf_sizes_choice)],
            CUSTOM_SHELF_SIZES: [MessageHandler(filters.TEXT & ~filters.COMMAND, custom_shelf_sizes)],
            ROD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rod)],
            FALSE_PANEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_false_panel)],
            METAL_CUTTING: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_metal_cutting)],
            RS_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rs_type)],
            SHELF_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_shelf_type)],
            SGR_TIERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_sgr_tiers)],
            SGR_ADJUSTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_sgr_adjustment)],
            BUMPER_INSTALLATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_bumper_installation)],
            BUMPER_TRANSFER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_bumper_transfer)],
            SECOND_INSTALLER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_second_installer)],
            DISTANCE_KAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_distance_kad)],
            WALL_MATERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_wall_material)],
            ROOF_MATERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_roof_material)],
            RS_PROFILE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rs_profile)],
            FLOOR_COVERING: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_floor_covering)],
            COLOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_color)],
            SHELF_MATERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_shelf_material)],
            OPTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_options)],
            OPTION_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_option_count)],
            RESTART: [MessageHandler(filters.TEXT & ~filters.COMMAND, restart_calculation)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
