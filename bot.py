import os
import logging
import urllib.parse
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ñ–∏—Å–∞
OFFICE_COORDS = "59.973050,30.445787"
OFFICE_ADDRESS = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —É–ª. –ö–æ–º—Å–æ–º–æ–ª–∞, 2–∫1"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    ADDRESS, DISTANCE_KAD, WIDTH, HEIGHT, ELEMENTS, RS_COUNT, RS_WIDER_THAN_2M, 
    RS_TYPE, SHELVES, SHELF_SIZES_CHOICE, CUSTOM_SHELF_SIZES, SHELF_TYPE,
    WALL_MATERIAL, ROOF_MATERIAL, RS_PROFILE, FLOOR_COVERING, COLOR, SHELF_MATERIAL,
    ALL_OPTIONS, OPTION_COUNT, RESTART, SHOW_SUMMARY
) = range(22)

# –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
PRICE_LIST = {
    '–í—ã—Ö–æ–¥': 2000,
    '–î–æ—Å—Ç–∞–≤–∫–∞ 1 –∑–∞–∫–∞–∑': 2000,
    '–í—Ç–æ—Ä–∞—è –†/–° —à–∏—Ä–µ 2—Ö –º–µ—Ç—Ä–æ–≤': 1000,
    '–í—Ç–æ—Ä–æ–π –º–æ–Ω—Ç–∞–∂–Ω–∏–∫': 2000,
    '–ë–æ–∫–æ–≤–∞—è —Å—Ç–µ–Ω–∫–∞. –º/–ø': 364,
    '–ö—Ä—ã—à–∞. –º/–ø': 280,
    '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è. –º/–ø': 180,
    '–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞. –º2': 250,
    '–î–Ω–æ OSB. –º/–ø': 350,
    '–ù–∞ –¥–Ω–æ –∫–≤–∏–Ω—Ç–µ—Ç (—Ü–∏–Ω–∫). –º/–ø': 100,
    '–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞. –º/–ø': 300,
    '–§–∞–ª—å—à-–ø–∞–Ω–µ–ª—å. —à—Ç': 550,
    '–†/–° (PD39, PD45, PD55 –¥–æ 6 –º2). —à—Ç': 300,
    '–†/–° (AER44mS –æ—Ç 4 –º2, PD55 –æ—Ç 6 –º2). —à—Ç': 500,
    '–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂–∞ + —É–ø–æ—Ä. –º/–ø': 250,
    '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ OSB. –º/–ø': 100,
    '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ –º–µ—Ç–∞–ª–ª. –º/–ø': 160,
    '–†–µ–∑–∫–∞ –º–µ—Ç–∞–ª–ª, –ª–∞–º–µ–ª–µ–π. —à—Ç': 30,
    '–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂. —à—Ç': 400,
    '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä—É—Å–æ–≤. –º/–ø': 80,
    '–ü–æ–¥–≥–æ–Ω–∫–∞ –ø–æ —à–∏—Ä–∏–Ω–µ –Ω–∞ –º–µ—Å—Ç–µ. –ö–æ–º–ø–ª–µ–∫': 500,
    '–®—Ç–∞–Ω–≥–∞. —à—Ç': 200,
    '–û—Ç–±–æ–π–Ω–∏–∫–∏ (–º–æ–Ω—Ç–∞–∂ –Ω–æ–≤—ã—Ö). –∫–æ–º–ø–ª–µ–∫': 400,
    '–û—Ç–±–æ–π–Ω–∏–∫–∏ (–ø–µ—Ä–µ–Ω–æ—Å). –∫–æ–º–ø–ª–µ–∫': 700,
    'LED —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫. —à—Ç': 200,
    '–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥ (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ) —à—Ç': 500,
    '–í–µ–Ω—Ç —Ä–µ—à–µ—Ç–∫–∏ (—Å—Ç–µ–Ω–∫–∏) —à—Ç': 200,
    '–°—Ç–æ–π–∫–∏ –¥–ª—è –∫–æ–ª–µ—Å. —à—Ç': 500,
    '–í—ã–µ–∑–¥ –∑–∞ –ú–ö–ê–î –±–æ–ª–µ–µ 10 –∫–º. (15–†—É–±/–∫–º)': 15,
    '–í—ã—Å–æ—Ç–∞ —à–∫–∞—Ñ–∞ 2,5-3 –º': 500,
    '–í—ã—Å–æ—Ç–∞ —à–∫–∞—Ñ–∞ 3–º –∏ –±–æ–ª–µ–µ': 1000,
    '–§–æ—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–∞ —Ñ–æ–Ω–µ —à–∫–∞—Ñ–∞. —à—Ç': 250,
    '–í–∏–¥–µ–æ–æ—Ç–∑—ã–≤': 750
}

MATERIALS = {
    'wall': ["–°—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª—å 40 –º–º", "–ü—Ä–æ—Ñ–ª–∏—Å—Ç –°8–ê, 0,45 –º–º"],
    'roof': ["–°—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª—å 40 –º–º", "–ü—Ä–æ—Ñ–ª–∏—Å—Ç –°8–ê, 0,45 –º–º", "–ü–ª–∏—Ç–∞ OSB + –º—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è"],
    'rs_profile': ["PD 45", "PD 55", "AR 40", "AER 44–º/5", "AEG 56"],
    'floor': ["–Ω–µ—Ç", "–ø–æ–∫—Ä–∞—Å–∫–∞", "–ª–∏—Å—Ç –æ—Ü–∏–Ω–∫. –º–µ—Ç–∞–ª–ª–∞", "–ª–∏—Å—Ç –∞–ª—é–º–∏–Ω–∏—è (–∫–≤–∏–Ω—Ç–µ—Ç)"],
    'color': ["–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π RAL 9006", "–ë–µ–∂–µ–≤—ã–π RAL 1014", "–ë–µ–ª—ã–π RAL 9003", "–ê–Ω—Ç—Ä–∞—Ü–∏—Ç RAL 7016", "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π RAL 8014", "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π RAL 8017", "–°–µ—Ä—ã–π RAL 7038"],
    'shelf': ["–ú–µ—Ç–∞–ª–ª", "–ü–ª–∏—Ç–∞ OSB 22 –º–º", "–°–ì–†", "–ù–∞–≤–µ—Å–Ω–æ–π"]
}

# –í—Å–µ –æ–ø—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ
ALL_OPTIONS_LIST = [
    "–®—Ç–∞–Ω–≥–∞",
    "–§–∞–ª—å—à-–ø–∞–Ω–µ–ª—å", 
    "–†–µ–∑–∫–∞ –º–µ—Ç–∞–ª–ª/–ª–∞–º–µ–ª–µ–π",
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–±–æ–π–Ω–∏–∫–æ–≤",
    "–ü–µ—Ä–µ–Ω–æ—Å –æ—Ç–±–æ–π–Ω–∏–∫–æ–≤", 
    "–í—Ç–æ—Ä–æ–π –º–æ–Ω—Ç–∞–∂–Ω–∏–∫",
    "–í–µ–Ω—Ç. —Ä–µ—à–µ—Ç–∫–∞",
    "LED —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫",
    "–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥",
    "–°—Ç–æ–π–∫–∏ –¥–ª—è –∫–æ–ª–µ—Å",
    "–§–æ—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–∞",
    "–í–∏–¥–µ–æ–æ—Ç–∑—ã–≤"
]

# –û–ø—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Ç—Ä–µ–±—É—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–∞/–Ω–µ—Ç)
BOOLEAN_OPTIONS = ["–§–æ—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–∞", "–í–∏–¥–µ–æ–æ—Ç–∑—ã–≤"]

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–ø—Ü–∏–π –∏ –∏—Ö —Ü–µ–Ω –≤ –ø—Ä–∞–π—Å–µ
OPTION_PRICE_KEYS = {
    "–®—Ç–∞–Ω–≥–∞": "–®—Ç–∞–Ω–≥–∞. —à—Ç",
    "–§–∞–ª—å—à-–ø–∞–Ω–µ–ª—å": "–§–∞–ª—å—à-–ø–∞–Ω–µ–ª—å. —à—Ç",
    "–†–µ–∑–∫–∞ –º–µ—Ç–∞–ª–ª/–ª–∞–º–µ–ª–µ–π": "–†–µ–∑–∫–∞ –º–µ—Ç–∞–ª–ª, –ª–∞–º–µ–ª–µ–π. —à—Ç",
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–±–æ–π–Ω–∏–∫–æ–≤": "–û—Ç–±–æ–π–Ω–∏–∫–∏ (–º–æ–Ω—Ç–∞–∂ –Ω–æ–≤—ã—Ö). –∫–æ–º–ø–ª–µ–∫",
    "–ü–µ—Ä–µ–Ω–æ—Å –æ—Ç–±–æ–π–Ω–∏–∫–æ–≤": "–û—Ç–±–æ–π–Ω–∏–∫–∏ (–ø–µ—Ä–µ–Ω–æ—Å). –∫–æ–º–ø–ª–µ–∫",
    "–í—Ç–æ—Ä–æ–π –º–æ–Ω—Ç–∞–∂–Ω–∏–∫": "–í—Ç–æ—Ä–æ–π –º–æ–Ω—Ç–∞–∂–Ω–∏–∫",
    "–í–µ–Ω—Ç. —Ä–µ—à–µ—Ç–∫–∞": "–í–µ–Ω—Ç —Ä–µ—à–µ—Ç–∫–∏ (—Å—Ç–µ–Ω–∫–∏) —à—Ç",
    "LED —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫": "LED —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫. —à—Ç",
    "–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥": "–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥ (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ) —à—Ç",
    "–°—Ç–æ–π–∫–∏ –¥–ª—è –∫–æ–ª–µ—Å": "–°—Ç–æ–π–∫–∏ –¥–ª—è –∫–æ–ª–µ—Å. —à—Ç",
    "–§–æ—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–∞": "–§–æ—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–∞ —Ñ–æ–Ω–µ —à–∫–∞—Ñ–∞. —à—Ç",
    "–í–∏–¥–µ–æ–æ—Ç–∑—ã–≤": "–í–∏–¥–µ–æ–æ—Ç–∑—ã–≤"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ –°–∞—à–∏.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ä–∞—Å—á—ë—Ç. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–æ–Ω—Ç–∞–∂–∞:"
    )
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
    try:
        encoded_address = urllib.parse.quote(update.message.text)
        yandex_maps_url = f"https://yandex.ru/maps/?rtext={OFFICE_COORDS}~{encoded_address}&rtt=mt"
        
        await update.message.reply_text(
            f"üìç –ê–¥—Ä–µ—Å –º–æ–Ω—Ç–∞–∂–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {update.message.text}\n\n"
            f"üöó [–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ—Ç –æ—Ñ–∏—Å–∞ –¥–æ –∞–¥—Ä–µ—Å–∞ –º–æ–Ω—Ç–∞–∂–∞]({yandex_maps_url})",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ã: {e}")
        await update.message.reply_text(f"üìç –ê–¥—Ä–µ—Å –º–æ–Ω—Ç–∞–∂–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {update.message.text}")
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ö–ê–î –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö:")
    return DISTANCE_KAD

async def get_distance_kad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        distance = float(update.message.text)
        if distance < 0:
            raise ValueError
        context.user_data['distance_kad'] = distance
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —à–∫–∞—Ñ–∞:")
        return WIDTH
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return DISTANCE_KAD

async def get_width(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        width = int(update.message.text)
        if width < 0:
            raise ValueError
        context.user_data['width'] = width
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —à–∫–∞—Ñ–∞:")
        return HEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return WIDTH

async def get_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = int(update.message.text)
        if height < 0:
            raise ValueError
        context.user_data['height'] = height
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –≤—ã—Å–æ—Ç—ã
        if height >= 3000:
            context.user_data['height_over_3000'] = True
            context.user_data['height_over_2500'] = False
        elif height >= 2500:
            context.user_data['height_over_2500'] = True
            context.user_data['height_over_3000'] = False
        else:
            context.user_data['height_over_2500'] = False
            context.user_data['height_over_3000'] = False
        
        keyboard = [
            ["–ö—Ä—ã—à–∞", "–ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞", "–õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞"],
            ["–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞", "–î–Ω–æ", "–î–∞–ª–µ–µ"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —à–∫–∞—Ñ–∞ (–Ω–∞–∂–∏–º–∞—è –ø–æ –æ–¥–Ω–æ–º—É):",
            reply_markup=reply_markup
        )
        context.user_data['elements'] = []
        return ELEMENTS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return HEIGHT

async def get_elements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "–î–∞–ª–µ–µ":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª—å—Å—Ç–∞–≤–µ–Ω:", 
            reply_markup=ReplyKeyboardRemove()
        )
        return RS_COUNT
    
    element_map = {
        "–ö—Ä—ã—à–∞": "roof",
        "–ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞": "right_wall",
        "–õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞": "left_wall",
        "–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞": "back_wall",
        "–î–Ω–æ": "floor"
    }
    
    if text in element_map:
        if element_map[text] not in context.user_data['elements']:
            context.user_data['elements'].append(element_map[text])
            message = f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {text}"
        else:
            message = f"–≠–ª–µ–º–µ–Ω—Ç '{text}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω"
    else:
        message = "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ."
    
    keyboard = [
        ["–ö—Ä—ã—à–∞", "–ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞", "–õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞"],
        ["–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞", "–î–Ω–æ", "–î–∞–ª–µ–µ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
    await update.message.reply_text(
        f"{message}",
        reply_markup=reply_markup
    )
    
    return ELEMENTS

async def get_rs_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count < 0:
            raise ValueError
        context.user_data['rs_count'] = count
        
        if count >= 2:
            # –ï—Å–ª–∏ 2 –∏–ª–∏ –±–æ–ª–µ–µ —Ä–æ–ª—å—Å—Ç–∞–≤–µ–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –≤—Ç–æ—Ä—É—é —à–∏—Ä–µ 2–º
            keyboard = [["–î–∞", "–ù–µ—Ç"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text("–í—Ç–æ—Ä–∞—è —Ä–æ–ª—å—Å—Ç–∞–≤–Ω—è —à–∏—Ä–µ 2 –º–µ—Ç—Ä–æ–≤?", reply_markup=reply_markup)
            return RS_WIDER_THAN_2M
        else:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ä–æ–ª—å—Å—Ç–∞–≤–Ω—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
            keyboard = [["–î–æ 6 –º¬≤ (300 ‚ÇΩ/—à—Ç)"], ["–ë–æ–ª–µ–µ 6 –º¬≤ (500 ‚ÇΩ/—à—Ç)"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–ª—å—Å—Ç–∞–≤–Ω–µ–π:", reply_markup=reply_markup)
            return RS_TYPE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return RS_COUNT

async def get_rs_wider_than_2m(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–î–∞":
        context.user_data['rs_wider_than_2m'] = True
    else:
        context.user_data['rs_wider_than_2m'] = False
    
    keyboard = [["–î–æ 6 –º¬≤ (300 ‚ÇΩ/—à—Ç)"], ["–ë–æ–ª–µ–µ 6 –º¬≤ (500 ‚ÇΩ/—à—Ç)"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–ª—å—Å—Ç–∞–≤–Ω–µ–π:", reply_markup=reply_markup)
    return RS_TYPE

async def get_rs_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if "–î–æ 6 –º¬≤" in choice:
        context.user_data['rs_type'] = 'upTo6'
    else:
        context.user_data['rs_type'] = 'over6'
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫:")
    return SHELVES

async def get_shelves(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count < 0:
            raise ValueError
        context.user_data['shelves'] = count
        
        if count > 0:
            keyboard = [["–î–∞, –≤–≤–æ–¥–∏—Ç—å –≤—Ä—É—á–Ω—É—é"], ["–ù–µ—Ç, –ø–æ–ª–∫–∏ = —à–∏—Ä–∏–Ω–µ —à–∫–∞—Ñ–∞"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                "–ü–æ–ª–∫–∏ –Ω–µ –≤ —Ä–∞–∑–º–µ—Ä —à–∫–∞—Ñ–∞?",
                reply_markup=reply_markup
            )
            return SHELF_SIZES_CHOICE
        else:
            context.user_data['custom_shelf_sizes'] = False
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å—Ç–µ–ª–ª–∞–∂–∞
            keyboard = [["–ë–µ–∑ —Å—Ç–µ–ª–ª–∞–∂–∞"], ["–°—Ç–∞–Ω–¥–∞—Ä—Ç (–Ω–µ—Ä–∞–∑–±–æ—Ä–Ω—ã–π)"], ["–°–ì–† (—Ä–∞–∑–±–æ—Ä–Ω—ã–π)"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–µ–ª–ª–∞–∂–∞:", reply_markup=reply_markup)
            return SHELF_TYPE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return SHELVES

async def shelf_sizes_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "–î–∞, –≤–≤–æ–¥–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
        context.user_data['custom_shelf_sizes'] = True
        context.user_data['shelf_widths'] = []
        context.user_data['current_shelf'] = 1
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–ª–∫–∏ 1:")
        return CUSTOM_SHELF_SIZES
    else:
        context.user_data['custom_shelf_sizes'] = False
        keyboard = [["–ë–µ–∑ —Å—Ç–µ–ª–ª–∞–∂–∞"], ["–°—Ç–∞–Ω–¥–∞—Ä—Ç (–Ω–µ—Ä–∞–∑–±–æ—Ä–Ω—ã–π)"], ["–°–ì–† (—Ä–∞–∑–±–æ—Ä–Ω—ã–π)"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–µ–ª–ª–∞–∂–∞:", reply_markup=reply_markup)
        return SHELF_TYPE

async def custom_shelf_sizes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        width = int(update.message.text)
        if width < 0:
            raise ValueError
        context.user_data['shelf_widths'].append(width)
        
        current = context.user_data['current_shelf']
        total = context.user_data['shelves']
        
        if current < total:
            context.user_data['current_shelf'] += 1
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–ª–∫–∏ {current + 1}:")
            return CUSTOM_SHELF_SIZES
        else:
            keyboard = [["–ë–µ–∑ —Å—Ç–µ–ª–ª–∞–∂–∞"], ["–°—Ç–∞–Ω–¥–∞—Ä—Ç (–Ω–µ—Ä–∞–∑–±–æ—Ä–Ω—ã–π)"], ["–°–ì–† (—Ä–∞–∑–±–æ—Ä–Ω—ã–π)"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–µ–ª–ª–∞–∂–∞:", reply_markup=reply_markup)
            return SHELF_TYPE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return CUSTOM_SHELF_SIZES

async def get_shelf_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if "–ë–µ–∑ —Å—Ç–µ–ª–ª–∞–∂–∞" in choice:
        context.user_data['shelf_type'] = 'none'
    elif "–°—Ç–∞–Ω–¥–∞—Ä—Ç" in choice:
        context.user_data['shelf_type'] = 'standard'
    else:
        context.user_data['shelf_type'] = 'sgr'
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    keyboard = [[mat] for mat in MATERIALS['wall']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—Ç–µ–Ω–æ–∫:", reply_markup=reply_markup)
    return WALL_MATERIAL

async def get_wall_material(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['wall_material'] = update.message.text
    keyboard = [[mat] for mat in MATERIALS['roof']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫—Ä—ã—à–∏:", reply_markup=reply_markup)
    return ROOF_MATERIAL

async def get_roof_material(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['roof_material'] = update.message.text
    keyboard = [[mat] for mat in MATERIALS['rs_profile']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –†/–°:", reply_markup=reply_markup)
    return RS_PROFILE

async def get_rs_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rs_profile'] = update.message.text
    keyboard = [[mat] for mat in MATERIALS['floor']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–Ω–∞:", reply_markup=reply_markup)
    return FLOOR_COVERING

async def get_floor_covering(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['floor_covering'] = update.message.text
    keyboard = [[mat] for mat in MATERIALS['color']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=reply_markup)
    return COLOR

async def get_color(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['color'] = update.message.text
    keyboard = [[mat] for mat in MATERIALS['shelf']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–ª–æ–∫:", reply_markup=reply_markup)
    return SHELF_MATERIAL

async def get_shelf_material(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['shelf_material'] = update.message.text
    
    # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø—Ü–∏–π
    keyboard = [[opt] for opt in ALL_OPTIONS_LIST] + [["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
    await update.message.reply_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=reply_markup
    )
    context.user_data['selected_options'] = {}
    return ALL_OPTIONS

async def get_all_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
        keyboard = [["–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=reply_markup
        )
        return SHOW_SUMMARY
    
    if text in ALL_OPTIONS_LIST:
        if text in BOOLEAN_OPTIONS:
            # –î–ª—è –±—É–ª–µ–≤—ã—Ö –æ–ø—Ü–∏–π –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ 1
            context.user_data['selected_options'][text] = 1
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
            keyboard = [[opt] for opt in ALL_OPTIONS_LIST] + [["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
            await update.message.reply_text(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {text} (1 —à—Ç)",
                reply_markup=reply_markup
            )
            return ALL_OPTIONS
        else:
            # –î–ª—è –í–°–ï–• –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            context.user_data['current_option'] = text
            await update.message.reply_text(f"üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '{text}':")
            return OPTION_COUNT
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return ALL_OPTIONS

async def get_option_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count < 0:
            raise ValueError
        
        current_option = context.user_data['current_option']
        context.user_data['selected_options'][current_option] = count
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø—Ü–∏–∏
        keyboard = [[opt] for opt in ALL_OPTIONS_LIST] + [["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {current_option} - {count} —à—Ç",
            reply_markup=reply_markup
        )
        return ALL_OPTIONS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return OPTION_COUNT

async def show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
        await calculate_result(update, context)
        return ConversationHandler.END
    elif choice == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await show_edit_menu(update, context)
        return RESTART

async def show_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—è"""
    data = context.user_data
    
    summary = "üìã –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    summary += f"üìç –ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    summary += f"üöó –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ö–ê–î: {data.get('distance_kad', 0)} –∫–º\n"
    summary += f"‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ —à–∫–∞—Ñ–∞: {data.get('width', 0)} –º–º\n"
    summary += f"‚ÜïÔ∏è –í—ã—Å–æ—Ç–∞ —à–∫–∞—Ñ–∞: {data.get('height', 0)} –º–º\n"
    
    # –≠–ª–µ–º–µ–Ω—Ç—ã —à–∫–∞—Ñ–∞
    if data.get('elements'):
        elements_map = {'roof': '–ö—Ä—ã—à–∞', 'right_wall': '–ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞', 'left_wall': '–õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞', 'back_wall': '–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞', 'floor': '–î–Ω–æ'}
        elements_str = ', '.join([elements_map.get(e, e) for e in data['elements']])
        summary += f"üì¶ –≠–ª–µ–º–µ–Ω—Ç—ã: {elements_str}\n"
    
    # –†–æ–ª—å—Å—Ç–∞–≤–Ω–∏
    summary += f"üö™ –†–æ–ª—å—Å—Ç–∞–≤–Ω–∏: {data.get('rs_count', 0)} —à—Ç\n"
    if data.get('rs_wider_than_2m'):
        summary += "üìè –í—Ç–æ—Ä–∞—è –†/–° —à–∏—Ä–µ 2–º: –î–∞\n"
    if data.get('rs_type'):
        summary += f"üè∑Ô∏è –¢–∏–ø –†/–°: {'–î–æ 6 –º¬≤' if data['rs_type'] == 'upTo6' else '–ë–æ–ª–µ–µ 6 –º¬≤'}\n"
    
    # –ü–æ–ª–∫–∏ –∏ —Å—Ç–µ–ª–ª–∞–∂
    summary += f"üß± –ü–æ–ª–∫–∏: {data.get('shelves', 0)} —à—Ç\n"
    if data.get('shelf_type'):
        shelf_types = {'none': '–ë–µ–∑ —Å—Ç–µ–ª–ª–∞–∂–∞', 'standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç', 'sgr': '–°–ì–†'}
        summary += f"ü™ú –¢–∏–ø —Å—Ç–µ–ª–ª–∞–∂–∞: {shelf_types.get(data['shelf_type'], data['shelf_type'])}\n"
    
    # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
    if data.get('wall_material'):
        summary += f"üß± –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω–æ–∫: {data['wall_material']}\n"
    if data.get('roof_material'):
        summary += f"üè† –ú–∞—Ç–µ—Ä–∏–∞–ª –∫—Ä—ã—à–∏: {data['roof_material']}\n"
    if data.get('rs_profile'):
        summary += f"üö™ –ü—Ä–æ—Ñ–∏–ª—å –†/–°: {data['rs_profile']}\n"
    if data.get('floor_covering'):
        summary += f"ü™µ –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–Ω–∞: {data['floor_covering']}\n"
    if data.get('color'):
        summary += f"üé® –¶–≤–µ—Ç: {data['color']}\n"
    if data.get('shelf_material'):
        summary += f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–ª–æ–∫: {data['shelf_material']}\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    if data.get('selected_options'):
        options_str = ', '.join([f"{opt} ({count})" if count > 1 else opt 
                               for opt, count in data['selected_options'].items()])
        summary += f"‚ûï –î–æ–ø. –æ–ø—Ü–∏–∏: {options_str}\n"
    
    summary += "\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    summary += "–ø–æ–ª–µ = –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
    summary += "–ü—Ä–∏–º–µ—Ä—ã:\n"
    summary += "—à–∏—Ä–∏–Ω–∞ = 2500\n"
    summary += "–∞–¥—Ä–µ—Å = –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å\n"
    summary += "–≤—Ç–æ—Ä–æ–π –º–æ–Ω—Ç–∞–∂–Ω–∏–∫ = 2\n\n"
    summary += "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
    
    await update.message.reply_text(summary)
    return RESTART

async def handle_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    
    if text == "–≥–æ—Ç–æ–≤–æ":
        await calculate_result(update, context)
        return ConversationHandler.END
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ø–æ–ª–µ = –∑–Ω–∞—á–µ–Ω–∏–µ"
    if "=" in text:
        try:
            field_part, value_part = text.split("=", 1)
            field = field_part.strip()
            value = value_part.strip()
            
            # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
            if field in ['—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–∞–¥']:
                context.user_data['distance_kad'] = float(value)
                await update.message.reply_text("‚úÖ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            elif field in ['—à–∏—Ä–∏–Ω–∞', '—à–∏—Ä–∏–Ω–∞ —à–∫–∞—Ñ–∞']:
                context.user_data['width'] = int(value)
                await update.message.reply_text("‚úÖ –®–∏—Ä–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            elif field in ['–≤—ã—Å–æ—Ç–∞', '–≤—ã—Å–æ—Ç–∞ —à–∫–∞—Ñ–∞']:
                height = int(value)
                context.user_data['height'] = height
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –≤—ã—Å–æ—Ç—ã
                if height >= 3000:
                    context.user_data['height_over_3000'] = True
                    context.user_data['height_over_2500'] = False
                elif height >= 2500:
                    context.user_data['height_over_2500'] = True
                    context.user_data['height_over_3000'] = False
                else:
                    context.user_data['height_over_2500'] = False
                    context.user_data['height_over_3000'] = False
                await update.message.reply_text("‚úÖ –í—ã—Å–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            elif field == '–∞–¥—Ä–µ—Å':
                context.user_data['address'] = value
                await update.message.reply_text("‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–ø—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                for opt in ALL_OPTIONS_LIST:
                    if field.lower() in opt.lower():
                        try:
                            count = int(value)
                            context.user_data['selected_options'][opt] = count
                            await update.message.reply_text(f"‚úÖ {opt} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {count} —à—Ç!")
                            await show_edit_menu(update, context)
                            return RESTART
                        except ValueError:
                            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
                            await show_edit_menu(update, context)
                            return RESTART
                
                await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∞–¥—Ä–µ—Å, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞, –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–∏.")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
            await show_edit_menu(update, context)
            return RESTART
            
        except (ValueError, IndexError):
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ø–æ–ª–µ = –∑–Ω–∞—á–µ–Ω–∏–µ")
            await show_edit_menu(update, context)
            return RESTART
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ø–æ–ª–µ = –∑–Ω–∞—á–µ–Ω–∏–µ\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'")
        await show_edit_menu(update, context)
        return RESTART

async def restart_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç":
        return await start(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.")
        return RESTART

async def calculate_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    results = []
    total = 0
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ –Ω–∞—á–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    address = data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
    results.append(f"üìç –ê–¥—Ä–µ—Å –º–æ–Ω—Ç–∞–∂–∞: {address}")
    results.append("")
    
    results.append("–í—ã—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É: 2000 ‚ÇΩ")
    total += 2000
    results.append("–î–æ—Å—Ç–∞–≤–∫–∞ 1 –∑–∞–∫–∞–∑: 2000 ‚ÇΩ")
    total += 2000
    
    elements = data.get('elements', [])
    width = data['width']
    height = data['height']
    
    if 'right_wall' in elements or 'left_wall' in elements:
        wall_count = sum(1 for e in ['right_wall', 'left_wall'] if e in elements)
        wall_length = height / 1000
        wall_cost = wall_count * wall_length * PRICE_LIST['–ë–æ–∫–æ–≤–∞—è —Å—Ç–µ–Ω–∫–∞. –º/–ø']
        results.append(f"–ë–æ–∫–æ–≤—ã–µ —Å—Ç–µ–Ω–∫–∏ ({wall_count} —à—Ç): {wall_cost:.0f} ‚ÇΩ")
        total += wall_cost
    
    if 'roof' in elements:
        roof_length = width / 1000
        roof_cost = roof_length * PRICE_LIST['–ö—Ä—ã—à–∞. –º/–ø']
        results.append(f"–ö—Ä—ã—à–∞: {roof_cost:.0f} ‚ÇΩ")
        total += roof_cost
    
    if 'back_wall' in elements:
        back_area = (width * height) / 1000000
        back_cost = back_area * PRICE_LIST['–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞. –º2']
        results.append(f"–ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞: {back_cost:.0f} ‚ÇΩ")
        total += back_cost
    
    if 'floor' in elements:
        floor_length = width / 1000
        floor_cost = floor_length * PRICE_LIST['–î–Ω–æ OSB. –º/–ø']
        results.append(f"–î–Ω–æ OSB: {floor_cost:.0f} ‚ÇΩ")
        total += floor_cost
        
        if data.get('floor_covering') in ["–ª–∏—Å—Ç –æ—Ü–∏–Ω–∫. –º–µ—Ç–∞–ª–ª–∞", "–ª–∏—Å—Ç –∞–ª—é–º–∏–Ω–∏—è (–∫–≤–∏–Ω—Ç–µ—Ç)"]:
            covering_cost = floor_length * PRICE_LIST['–ù–∞ –¥–Ω–æ –∫–≤–∏–Ω—Ç–µ—Ç (—Ü–∏–Ω–∫). –º/–ø']
            results.append(f"–ù–∞ –¥–Ω–æ –∫–≤–∏–Ω—Ç–µ—Ç: {covering_cost:.0f} ‚ÇΩ")
            total += covering_cost
    
    rs_count = data.get('rs_count', 0)
    if rs_count > 0:
        if data['rs_type'] == 'upTo6':
            rs_cost = rs_count * PRICE_LIST['–†/–° (PD39, PD45, PD55 –¥–æ 6 –º2). —à—Ç']
            results.append(f"–†/–° –¥–æ 6 –º¬≤ ({rs_count} —à—Ç): {rs_cost} ‚ÇΩ")
        else:
            rs_cost = rs_count * PRICE_LIST['–†/–° (AER44mS –æ—Ç 4 –º2, PD55 –æ—Ç 6 –º2). —à—Ç']
            results.append(f"–†/–° –±–æ–ª–µ–µ 6 –º¬≤ ({rs_count} —à—Ç): {rs_cost} ‚ÇΩ")
        total += rs_cost
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–æ–ª—å—Å—Ç–∞–≤–Ω–∏ —à–∏—Ä–µ 2–º, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
    if data.get('rs_wider_than_2m', False):
        total += PRICE_LIST['–í—Ç–æ—Ä–∞—è –†/–° —à–∏—Ä–µ 2—Ö –º–µ—Ç—Ä–æ–≤']
        results.append("–í—Ç–æ—Ä–∞—è –†/–° —à–∏—Ä–µ 2—Ö –º–µ—Ç—Ä–æ–≤: 1000 ‚ÇΩ")
    
    shelves = data.get('shelves', 0)
    if shelves > 0 and data['shelf_type'] == 'standard':
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–ª–æ–∫ –∏ —Ä–∞–º—ã
        total_shelf_cost = 0
        total_frame_cost = 0
        
        if data.get('custom_shelf_sizes') and data.get('shelf_widths'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–ª–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
            for i, width_mm in enumerate(data['shelf_widths']):
                width_m = width_mm / 1000  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–µ—Ç—Ä—ã
                
                if data['shelf_material'] == '–ú–µ—Ç–∞–ª–ª':
                    shelf_cost = width_m * PRICE_LIST['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ –º–µ—Ç–∞–ª–ª. –º/–ø']
                elif data['shelf_material'] == '–ü–ª–∏—Ç–∞ OSB 22 –º–º':
                    shelf_cost = width_m * PRICE_LIST['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ OSB. –º/–ø']
                
                frame_cost = width_m * PRICE_LIST['–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂–∞ + —É–ø–æ—Ä. –º/–ø']
                
                total_shelf_cost += shelf_cost
                total_frame_cost += frame_cost
        
        else:
            # –í—Å–µ –ø–æ–ª–∫–∏ = —à–∏—Ä–∏–Ω–µ —à–∫–∞—Ñ–∞
            shelf_width_m = width / 1000
            for i in range(shelves):
                if data['shelf_material'] == '–ú–µ—Ç–∞–ª–ª':
                    shelf_cost = shelf_width_m * PRICE_LIST['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ –º–µ—Ç–∞–ª–ª. –º/–ø']
                elif data['shelf_material'] == '–ü–ª–∏—Ç–∞ OSB 22 –º–º':
                    shelf_cost = shelf_width_m * PRICE_LIST['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ OSB. –º/–ø']
                
                frame_cost = shelf_width_m * PRICE_LIST['–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂–∞ + —É–ø–æ—Ä. –º/–ø']
                
                total_shelf_cost += shelf_cost
                total_frame_cost += frame_cost
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if data['shelf_material'] == '–ú–µ—Ç–∞–ª–ª':
            results.append(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ –º–µ—Ç–∞–ª–ª: {total_shelf_cost:.0f} ‚ÇΩ")
        else:
            results.append(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–æ–∫ OSB: {total_shelf_cost:.0f} ‚ÇΩ")
        total += total_shelf_cost
        
        results.append(f"–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂–∞ + —É–ø–æ—Ä: {total_frame_cost:.0f} ‚ÇΩ")
        total += total_frame_cost
    
    elif shelves > 0 and data['shelf_type'] == 'sgr':
        frame_cost = shelves * PRICE_LIST['–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂. —à—Ç']
        results.append(f"–†–∞–º–∞ —Å—Ç–µ–ª–ª–∞–∂–∞ –°–ì–†: {frame_cost} ‚ÇΩ")
        total += frame_cost
        
        if data.get('sgr_tiers'):
            tier_cost = (width / 1000) * data.get('sgr_tiers_count', 0) * PRICE_LIST['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä—É—Å–æ–≤. –º/–ø']
            results.append(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä—É—Å–æ–≤ –°–ì–†: {tier_cost:.0f} ‚ÇΩ")
            total += tier_cost
    
    selected_opts = data.get('selected_options', {})
    for opt, count in selected_opts.items():
        price_key = OPTION_PRICE_KEYS[opt]
        cost = count * PRICE_LIST[price_key]
        if opt in BOOLEAN_OPTIONS:
            results.append(f"{opt}: {cost} ‚ÇΩ")
        else:
            results.append(f"{opt} ({count} —à—Ç): {cost} ‚ÇΩ")
        total += cost
    
    if data.get('height_over_2500'):
        total += PRICE_LIST['–í—ã—Å–æ—Ç–∞ —à–∫–∞—Ñ–∞ 2,5-3 –º']
        results.append("–í—ã—Å–æ—Ç–∞ 2,5-3 –º: 500 ‚ÇΩ")
    elif data.get('height_over_3000'):
        total += PRICE_LIST['–í—ã—Å–æ—Ç–∞ —à–∫–∞—Ñ–∞ 3–º –∏ –±–æ–ª–µ–µ']
        results.append("–í—ã—Å–æ—Ç–∞ 3–º –∏ –±–æ–ª–µ–µ: 1000 ‚ÇΩ")
    
    distance = data.get('distance_kad', 0)
    if distance > 0:
        delivery_cost = distance * PRICE_LIST['–í—ã–µ–∑–¥ –∑–∞ –ú–ö–ê–î –±–æ–ª–µ–µ 10 –∫–º. (15–†—É–±/–∫–º)']
        results.append(f"–í—ã–µ–∑–¥ –∑–∞ –ö–ê–î ({distance} –∫–º): {delivery_cost:.0f} ‚ÇΩ")
        total += delivery_cost
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
    result_text = "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:\n\n" + "\n".join(results) + f"\n\nüí∞ *–ò–¢–û–ì–û: {total:.0f} ‚ÇΩ*"
    await update.message.reply_text(result_text, reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –≤ –∫–æ–Ω—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    try:
        encoded_address = urllib.parse.quote(data.get('address', ''))
        yandex_maps_url = f"https://yandex.ru/maps/?rtext={OFFICE_COORDS}~{encoded_address}&rtt=mt"
        await update.message.reply_text(
            f"üöó [–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ—Ç –æ—Ñ–∏—Å–∞ –¥–æ –∞–¥—Ä–µ—Å–∞ –º–æ–Ω—Ç–∞–∂–∞]({yandex_maps_url})",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {e}")
    
    keyboard = [["–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç?", reply_markup=reply_markup)
    
    return RESTART

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    TOKEN = "8258670576:AAEeT3bQfOQ1Euqdbw3jVhEXVETmyQ43iXs"
    print(f"üöÄ BOT_TOKEN (length={len(TOKEN) if TOKEN else 0}): '{TOKEN}'")

    if not TOKEN:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return

    try:
        application = Application.builder().token(TOKEN).build()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            DISTANCE_KAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_distance_kad)],
            WIDTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_width)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_height)],
            ELEMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_elements)],
            RS_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rs_count)],
            RS_WIDER_THAN_2M: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rs_wider_than_2m)],
            RS_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rs_type)],
            SHELVES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_shelves)],
            SHELF_SIZES_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, shelf_sizes_choice)],
            CUSTOM_SHELF_SIZES: [MessageHandler(filters.TEXT & ~filters.COMMAND, custom_shelf_sizes)],
            SHELF_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_shelf_type)],
            WALL_MATERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_wall_material)],
            ROOF_MATERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_roof_material)],
            RS_PROFILE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rs_profile)],
            FLOOR_COVERING: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_floor_covering)],
            COLOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_color)],
            SHELF_MATERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_shelf_material)],
            ALL_OPTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_all_options)],
            OPTION_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_option_count)],
            SHOW_SUMMARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_summary)],
            RESTART: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_input)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
